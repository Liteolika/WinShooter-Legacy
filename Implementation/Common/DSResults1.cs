//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Allberg.Shooter.Common {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSResults : DataSet {
        
        private ResultsDataTable tableResults;
        
        private TeamResultsDataTable tableTeamResults;
        
        public DSResults() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSResults(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Results"] != null)) {
                    this.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
                }
                if ((ds.Tables["TeamResults"] != null)) {
                    this.Tables.Add(new TeamResultsDataTable(ds.Tables["TeamResults"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResultsDataTable Results {
            get {
                return this.tableResults;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TeamResultsDataTable TeamResults {
            get {
                return this.tableTeamResults;
            }
        }
        
        public override DataSet Clone() {
            DSResults cln = ((DSResults)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Results"] != null)) {
                this.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
            }
            if ((ds.Tables["TeamResults"] != null)) {
                this.Tables.Add(new TeamResultsDataTable(ds.Tables["TeamResults"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableResults = ((ResultsDataTable)(this.Tables["Results"]));
            if ((this.tableResults != null)) {
                this.tableResults.InitVars();
            }
            this.tableTeamResults = ((TeamResultsDataTable)(this.Tables["TeamResults"]));
            if ((this.tableTeamResults != null)) {
                this.tableTeamResults.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSResults";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSResults.xsd";
            this.Locale = new System.Globalization.CultureInfo("sv");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableResults = new ResultsDataTable();
            this.Tables.Add(this.tableResults);
            this.tableTeamResults = new TeamResultsDataTable();
            this.Tables.Add(this.tableTeamResults);
        }
        
        private bool ShouldSerializeResults() {
            return false;
        }
        
        private bool ShouldSerializeTeamResults() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ResultsRowChangeEventHandler(object sender, ResultsRowChangeEvent e);
        
        public delegate void TeamResultsRowChangeEventHandler(object sender, TeamResultsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResultsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompetitorId;
            
            private DataColumn columnShooterName;
            
            private DataColumn columnClubId;
            
            private DataColumn columnHits;
            
            private DataColumn columnFigureHits;
            
            private DataColumn columnPoints;
            
            private DataColumn columnNorwPoints;
            
            private DataColumn columnMedal;
            
            private DataColumn columnHitsPerStn;
            
            private DataColumn columnFinalShootingPlace;
            
            private DataColumn columnPriceMoney;
            
            internal ResultsDataTable() : 
                    base("Results") {
                this.InitClass();
            }
            
            internal ResultsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompetitorIdColumn {
                get {
                    return this.columnCompetitorId;
                }
            }
            
            internal DataColumn ShooterNameColumn {
                get {
                    return this.columnShooterName;
                }
            }
            
            internal DataColumn ClubIdColumn {
                get {
                    return this.columnClubId;
                }
            }
            
            internal DataColumn HitsColumn {
                get {
                    return this.columnHits;
                }
            }
            
            internal DataColumn FigureHitsColumn {
                get {
                    return this.columnFigureHits;
                }
            }
            
            internal DataColumn PointsColumn {
                get {
                    return this.columnPoints;
                }
            }
            
            internal DataColumn NorwPointsColumn {
                get {
                    return this.columnNorwPoints;
                }
            }
            
            internal DataColumn MedalColumn {
                get {
                    return this.columnMedal;
                }
            }
            
            internal DataColumn HitsPerStnColumn {
                get {
                    return this.columnHitsPerStn;
                }
            }
            
            internal DataColumn FinalShootingPlaceColumn {
                get {
                    return this.columnFinalShootingPlace;
                }
            }
            
            internal DataColumn PriceMoneyColumn {
                get {
                    return this.columnPriceMoney;
                }
            }
            
            public ResultsRow this[int index] {
                get {
                    return ((ResultsRow)(this.Rows[index]));
                }
            }
            
            public event ResultsRowChangeEventHandler ResultsRowChanged;
            
            public event ResultsRowChangeEventHandler ResultsRowChanging;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleted;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleting;
            
            public void AddResultsRow(ResultsRow row) {
                this.Rows.Add(row);
            }
            
            public ResultsRow AddResultsRow(int CompetitorId, string ShooterName, string ClubId, int Hits, int FigureHits, int Points, int NorwPoints, int Medal, string HitsPerStn, int FinalShootingPlace, int PriceMoney) {
                ResultsRow rowResultsRow = ((ResultsRow)(this.NewRow()));
                rowResultsRow.ItemArray = new object[] {
                        CompetitorId,
                        ShooterName,
                        ClubId,
                        Hits,
                        FigureHits,
                        Points,
                        NorwPoints,
                        Medal,
                        HitsPerStn,
                        FinalShootingPlace,
                        PriceMoney};
                this.Rows.Add(rowResultsRow);
                return rowResultsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ResultsDataTable cln = ((ResultsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ResultsDataTable();
            }
            
            internal void InitVars() {
                this.columnCompetitorId = this.Columns["CompetitorId"];
                this.columnShooterName = this.Columns["ShooterName"];
                this.columnClubId = this.Columns["ClubId"];
                this.columnHits = this.Columns["Hits"];
                this.columnFigureHits = this.Columns["FigureHits"];
                this.columnPoints = this.Columns["Points"];
                this.columnNorwPoints = this.Columns["NorwPoints"];
                this.columnMedal = this.Columns["Medal"];
                this.columnHitsPerStn = this.Columns["HitsPerStn"];
                this.columnFinalShootingPlace = this.Columns["FinalShootingPlace"];
                this.columnPriceMoney = this.Columns["PriceMoney"];
            }
            
            private void InitClass() {
                this.columnCompetitorId = new DataColumn("CompetitorId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompetitorId);
                this.columnShooterName = new DataColumn("ShooterName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShooterName);
                this.columnClubId = new DataColumn("ClubId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubId);
                this.columnHits = new DataColumn("Hits", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHits);
                this.columnFigureHits = new DataColumn("FigureHits", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFigureHits);
                this.columnPoints = new DataColumn("Points", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPoints);
                this.columnNorwPoints = new DataColumn("NorwPoints", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNorwPoints);
                this.columnMedal = new DataColumn("Medal", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMedal);
                this.columnHitsPerStn = new DataColumn("HitsPerStn", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitsPerStn);
                this.columnFinalShootingPlace = new DataColumn("FinalShootingPlace", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFinalShootingPlace);
                this.columnPriceMoney = new DataColumn("PriceMoney", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPriceMoney);
            }
            
            public ResultsRow NewResultsRow() {
                return ((ResultsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ResultsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ResultsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultsRowChanged != null)) {
                    this.ResultsRowChanged(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultsRowChanging != null)) {
                    this.ResultsRowChanging(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultsRowDeleted != null)) {
                    this.ResultsRowDeleted(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultsRowDeleting != null)) {
                    this.ResultsRowDeleting(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveResultsRow(ResultsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResultsRow : DataRow {
            
            private ResultsDataTable tableResults;
            
            internal ResultsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableResults = ((ResultsDataTable)(this.Table));
            }
            
            public int CompetitorId {
                get {
                    try {
                        return ((int)(this[this.tableResults.CompetitorIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.CompetitorIdColumn] = value;
                }
            }
            
            public string ShooterName {
                get {
                    try {
                        return ((string)(this[this.tableResults.ShooterNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ShooterNameColumn] = value;
                }
            }
            
            public string ClubId {
                get {
                    try {
                        return ((string)(this[this.tableResults.ClubIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ClubIdColumn] = value;
                }
            }
            
            public int Hits {
                get {
                    try {
                        return ((int)(this[this.tableResults.HitsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.HitsColumn] = value;
                }
            }
            
            public int FigureHits {
                get {
                    try {
                        return ((int)(this[this.tableResults.FigureHitsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.FigureHitsColumn] = value;
                }
            }
            
            public int Points {
                get {
                    try {
                        return ((int)(this[this.tableResults.PointsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.PointsColumn] = value;
                }
            }
            
            public int NorwPoints {
                get {
                    try {
                        return ((int)(this[this.tableResults.NorwPointsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.NorwPointsColumn] = value;
                }
            }
            
            public int Medal {
                get {
                    try {
                        return ((int)(this[this.tableResults.MedalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.MedalColumn] = value;
                }
            }
            
            public string HitsPerStn {
                get {
                    try {
                        return ((string)(this[this.tableResults.HitsPerStnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.HitsPerStnColumn] = value;
                }
            }
            
            public int FinalShootingPlace {
                get {
                    try {
                        return ((int)(this[this.tableResults.FinalShootingPlaceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.FinalShootingPlaceColumn] = value;
                }
            }
            
            public int PriceMoney {
                get {
                    try {
                        return ((int)(this[this.tableResults.PriceMoneyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.PriceMoneyColumn] = value;
                }
            }
            
            public bool IsCompetitorIdNull() {
                return this.IsNull(this.tableResults.CompetitorIdColumn);
            }
            
            public void SetCompetitorIdNull() {
                this[this.tableResults.CompetitorIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsShooterNameNull() {
                return this.IsNull(this.tableResults.ShooterNameColumn);
            }
            
            public void SetShooterNameNull() {
                this[this.tableResults.ShooterNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClubIdNull() {
                return this.IsNull(this.tableResults.ClubIdColumn);
            }
            
            public void SetClubIdNull() {
                this[this.tableResults.ClubIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsHitsNull() {
                return this.IsNull(this.tableResults.HitsColumn);
            }
            
            public void SetHitsNull() {
                this[this.tableResults.HitsColumn] = System.Convert.DBNull;
            }
            
            public bool IsFigureHitsNull() {
                return this.IsNull(this.tableResults.FigureHitsColumn);
            }
            
            public void SetFigureHitsNull() {
                this[this.tableResults.FigureHitsColumn] = System.Convert.DBNull;
            }
            
            public bool IsPointsNull() {
                return this.IsNull(this.tableResults.PointsColumn);
            }
            
            public void SetPointsNull() {
                this[this.tableResults.PointsColumn] = System.Convert.DBNull;
            }
            
            public bool IsNorwPointsNull() {
                return this.IsNull(this.tableResults.NorwPointsColumn);
            }
            
            public void SetNorwPointsNull() {
                this[this.tableResults.NorwPointsColumn] = System.Convert.DBNull;
            }
            
            public bool IsMedalNull() {
                return this.IsNull(this.tableResults.MedalColumn);
            }
            
            public void SetMedalNull() {
                this[this.tableResults.MedalColumn] = System.Convert.DBNull;
            }
            
            public bool IsHitsPerStnNull() {
                return this.IsNull(this.tableResults.HitsPerStnColumn);
            }
            
            public void SetHitsPerStnNull() {
                this[this.tableResults.HitsPerStnColumn] = System.Convert.DBNull;
            }
            
            public bool IsFinalShootingPlaceNull() {
                return this.IsNull(this.tableResults.FinalShootingPlaceColumn);
            }
            
            public void SetFinalShootingPlaceNull() {
                this[this.tableResults.FinalShootingPlaceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriceMoneyNull() {
                return this.IsNull(this.tableResults.PriceMoneyColumn);
            }
            
            public void SetPriceMoneyNull() {
                this[this.tableResults.PriceMoneyColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResultsRowChangeEvent : EventArgs {
            
            private ResultsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ResultsRowChangeEvent(ResultsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ResultsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeamResultsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTeamId;
            
            private DataColumn columnTeamName;
            
            private DataColumn columnClubId;
            
            private DataColumn columnHits;
            
            private DataColumn columnFigureHits;
            
            private DataColumn columnPoints;
            
            private DataColumn columnNorwPoints;
            
            private DataColumn columnHitsPerStn;
            
            internal TeamResultsDataTable() : 
                    base("TeamResults") {
                this.InitClass();
            }
            
            internal TeamResultsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TeamIdColumn {
                get {
                    return this.columnTeamId;
                }
            }
            
            internal DataColumn TeamNameColumn {
                get {
                    return this.columnTeamName;
                }
            }
            
            internal DataColumn ClubIdColumn {
                get {
                    return this.columnClubId;
                }
            }
            
            internal DataColumn HitsColumn {
                get {
                    return this.columnHits;
                }
            }
            
            internal DataColumn FigureHitsColumn {
                get {
                    return this.columnFigureHits;
                }
            }
            
            internal DataColumn PointsColumn {
                get {
                    return this.columnPoints;
                }
            }
            
            internal DataColumn NorwPointsColumn {
                get {
                    return this.columnNorwPoints;
                }
            }
            
            internal DataColumn HitsPerStnColumn {
                get {
                    return this.columnHitsPerStn;
                }
            }
            
            public TeamResultsRow this[int index] {
                get {
                    return ((TeamResultsRow)(this.Rows[index]));
                }
            }
            
            public event TeamResultsRowChangeEventHandler TeamResultsRowChanged;
            
            public event TeamResultsRowChangeEventHandler TeamResultsRowChanging;
            
            public event TeamResultsRowChangeEventHandler TeamResultsRowDeleted;
            
            public event TeamResultsRowChangeEventHandler TeamResultsRowDeleting;
            
            public void AddTeamResultsRow(TeamResultsRow row) {
                this.Rows.Add(row);
            }
            
            public TeamResultsRow AddTeamResultsRow(int TeamId, string TeamName, string ClubId, int Hits, int FigureHits, int Points, int NorwPoints, string HitsPerStn) {
                TeamResultsRow rowTeamResultsRow = ((TeamResultsRow)(this.NewRow()));
                rowTeamResultsRow.ItemArray = new object[] {
                        TeamId,
                        TeamName,
                        ClubId,
                        Hits,
                        FigureHits,
                        Points,
                        NorwPoints,
                        HitsPerStn};
                this.Rows.Add(rowTeamResultsRow);
                return rowTeamResultsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TeamResultsDataTable cln = ((TeamResultsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TeamResultsDataTable();
            }
            
            internal void InitVars() {
                this.columnTeamId = this.Columns["TeamId"];
                this.columnTeamName = this.Columns["TeamName"];
                this.columnClubId = this.Columns["ClubId"];
                this.columnHits = this.Columns["Hits"];
                this.columnFigureHits = this.Columns["FigureHits"];
                this.columnPoints = this.Columns["Points"];
                this.columnNorwPoints = this.Columns["NorwPoints"];
                this.columnHitsPerStn = this.Columns["HitsPerStn"];
            }
            
            private void InitClass() {
                this.columnTeamId = new DataColumn("TeamId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamId);
                this.columnTeamName = new DataColumn("TeamName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamName);
                this.columnClubId = new DataColumn("ClubId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubId);
                this.columnHits = new DataColumn("Hits", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHits);
                this.columnFigureHits = new DataColumn("FigureHits", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFigureHits);
                this.columnPoints = new DataColumn("Points", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPoints);
                this.columnNorwPoints = new DataColumn("NorwPoints", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNorwPoints);
                this.columnHitsPerStn = new DataColumn("HitsPerStn", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitsPerStn);
            }
            
            public TeamResultsRow NewTeamResultsRow() {
                return ((TeamResultsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TeamResultsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TeamResultsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TeamResultsRowChanged != null)) {
                    this.TeamResultsRowChanged(this, new TeamResultsRowChangeEvent(((TeamResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TeamResultsRowChanging != null)) {
                    this.TeamResultsRowChanging(this, new TeamResultsRowChangeEvent(((TeamResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TeamResultsRowDeleted != null)) {
                    this.TeamResultsRowDeleted(this, new TeamResultsRowChangeEvent(((TeamResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TeamResultsRowDeleting != null)) {
                    this.TeamResultsRowDeleting(this, new TeamResultsRowChangeEvent(((TeamResultsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTeamResultsRow(TeamResultsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeamResultsRow : DataRow {
            
            private TeamResultsDataTable tableTeamResults;
            
            internal TeamResultsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTeamResults = ((TeamResultsDataTable)(this.Table));
            }
            
            public int TeamId {
                get {
                    try {
                        return ((int)(this[this.tableTeamResults.TeamIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.TeamIdColumn] = value;
                }
            }
            
            public string TeamName {
                get {
                    try {
                        return ((string)(this[this.tableTeamResults.TeamNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.TeamNameColumn] = value;
                }
            }
            
            public string ClubId {
                get {
                    try {
                        return ((string)(this[this.tableTeamResults.ClubIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.ClubIdColumn] = value;
                }
            }
            
            public int Hits {
                get {
                    try {
                        return ((int)(this[this.tableTeamResults.HitsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.HitsColumn] = value;
                }
            }
            
            public int FigureHits {
                get {
                    try {
                        return ((int)(this[this.tableTeamResults.FigureHitsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.FigureHitsColumn] = value;
                }
            }
            
            public int Points {
                get {
                    try {
                        return ((int)(this[this.tableTeamResults.PointsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.PointsColumn] = value;
                }
            }
            
            public int NorwPoints {
                get {
                    try {
                        return ((int)(this[this.tableTeamResults.NorwPointsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.NorwPointsColumn] = value;
                }
            }
            
            public string HitsPerStn {
                get {
                    try {
                        return ((string)(this[this.tableTeamResults.HitsPerStnColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamResults.HitsPerStnColumn] = value;
                }
            }
            
            public bool IsTeamIdNull() {
                return this.IsNull(this.tableTeamResults.TeamIdColumn);
            }
            
            public void SetTeamIdNull() {
                this[this.tableTeamResults.TeamIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTeamNameNull() {
                return this.IsNull(this.tableTeamResults.TeamNameColumn);
            }
            
            public void SetTeamNameNull() {
                this[this.tableTeamResults.TeamNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClubIdNull() {
                return this.IsNull(this.tableTeamResults.ClubIdColumn);
            }
            
            public void SetClubIdNull() {
                this[this.tableTeamResults.ClubIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsHitsNull() {
                return this.IsNull(this.tableTeamResults.HitsColumn);
            }
            
            public void SetHitsNull() {
                this[this.tableTeamResults.HitsColumn] = System.Convert.DBNull;
            }
            
            public bool IsFigureHitsNull() {
                return this.IsNull(this.tableTeamResults.FigureHitsColumn);
            }
            
            public void SetFigureHitsNull() {
                this[this.tableTeamResults.FigureHitsColumn] = System.Convert.DBNull;
            }
            
            public bool IsPointsNull() {
                return this.IsNull(this.tableTeamResults.PointsColumn);
            }
            
            public void SetPointsNull() {
                this[this.tableTeamResults.PointsColumn] = System.Convert.DBNull;
            }
            
            public bool IsNorwPointsNull() {
                return this.IsNull(this.tableTeamResults.NorwPointsColumn);
            }
            
            public void SetNorwPointsNull() {
                this[this.tableTeamResults.NorwPointsColumn] = System.Convert.DBNull;
            }
            
            public bool IsHitsPerStnNull() {
                return this.IsNull(this.tableTeamResults.HitsPerStnColumn);
            }
            
            public void SetHitsPerStnNull() {
                this[this.tableTeamResults.HitsPerStnColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeamResultsRowChangeEvent : EventArgs {
            
            private TeamResultsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TeamResultsRowChangeEvent(TeamResultsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TeamResultsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
