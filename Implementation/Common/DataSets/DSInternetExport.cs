//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Allberg.Shooter.Common {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSInternetExport : DataSet {
        
        private PatrolsByClubDataTable tablePatrolsByClub;
        
        public DSInternetExport() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSInternetExport(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["PatrolsByClub"] != null)) {
                    this.Tables.Add(new PatrolsByClubDataTable(ds.Tables["PatrolsByClub"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PatrolsByClubDataTable PatrolsByClub {
            get {
                return this.tablePatrolsByClub;
            }
        }
        
        public override DataSet Clone() {
            DSInternetExport cln = ((DSInternetExport)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["PatrolsByClub"] != null)) {
                this.Tables.Add(new PatrolsByClubDataTable(ds.Tables["PatrolsByClub"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablePatrolsByClub = ((PatrolsByClubDataTable)(this.Tables["PatrolsByClub"]));
            if ((this.tablePatrolsByClub != null)) {
                this.tablePatrolsByClub.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DSInternetExport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSInternetExport.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablePatrolsByClub = new PatrolsByClubDataTable();
            this.Tables.Add(this.tablePatrolsByClub);
        }
        
        private bool ShouldSerializePatrolsByClub() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void PatrolsByClubRowChangeEventHandler(object sender, PatrolsByClubRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatrolsByClubDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClubName;
            
            private DataColumn columnClubId;
            
            private DataColumn columnShooterName;
            
            private DataColumn columnShooterClass;
            
            private DataColumn columnPatrolId;
            
            private DataColumn columnLane;
            
            private DataColumn columnStart;
            
            private DataColumn columnWeapon;
            
            private DataColumn columnWeaponCaliber;
            
            private DataColumn columnPayed;
            
            internal PatrolsByClubDataTable() : 
                    base("PatrolsByClub") {
                this.InitClass();
            }
            
            internal PatrolsByClubDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClubNameColumn {
                get {
                    return this.columnClubName;
                }
            }
            
            internal DataColumn ClubIdColumn {
                get {
                    return this.columnClubId;
                }
            }
            
            internal DataColumn ShooterNameColumn {
                get {
                    return this.columnShooterName;
                }
            }
            
            internal DataColumn ShooterClassColumn {
                get {
                    return this.columnShooterClass;
                }
            }
            
            internal DataColumn PatrolIdColumn {
                get {
                    return this.columnPatrolId;
                }
            }
            
            internal DataColumn LaneColumn {
                get {
                    return this.columnLane;
                }
            }
            
            internal DataColumn StartColumn {
                get {
                    return this.columnStart;
                }
            }
            
            internal DataColumn WeaponColumn {
                get {
                    return this.columnWeapon;
                }
            }
            
            internal DataColumn WeaponCaliberColumn {
                get {
                    return this.columnWeaponCaliber;
                }
            }
            
            internal DataColumn PayedColumn {
                get {
                    return this.columnPayed;
                }
            }
            
            public PatrolsByClubRow this[int index] {
                get {
                    return ((PatrolsByClubRow)(this.Rows[index]));
                }
            }
            
            public event PatrolsByClubRowChangeEventHandler PatrolsByClubRowChanged;
            
            public event PatrolsByClubRowChangeEventHandler PatrolsByClubRowChanging;
            
            public event PatrolsByClubRowChangeEventHandler PatrolsByClubRowDeleted;
            
            public event PatrolsByClubRowChangeEventHandler PatrolsByClubRowDeleting;
            
            public void AddPatrolsByClubRow(PatrolsByClubRow row) {
                this.Rows.Add(row);
            }
            
            public PatrolsByClubRow AddPatrolsByClubRow(string ClubName, string ClubId, string ShooterName, string ShooterClass, int PatrolId, int Lane, System.DateTime Start, string Weapon, string WeaponCaliber, int Payed) {
                PatrolsByClubRow rowPatrolsByClubRow = ((PatrolsByClubRow)(this.NewRow()));
                rowPatrolsByClubRow.ItemArray = new object[] {
                        ClubName,
                        ClubId,
                        ShooterName,
                        ShooterClass,
                        PatrolId,
                        Lane,
                        Start,
                        Weapon,
                        WeaponCaliber,
                        Payed};
                this.Rows.Add(rowPatrolsByClubRow);
                return rowPatrolsByClubRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PatrolsByClubDataTable cln = ((PatrolsByClubDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PatrolsByClubDataTable();
            }
            
            internal void InitVars() {
                this.columnClubName = this.Columns["ClubName"];
                this.columnClubId = this.Columns["ClubId"];
                this.columnShooterName = this.Columns["ShooterName"];
                this.columnShooterClass = this.Columns["ShooterClass"];
                this.columnPatrolId = this.Columns["PatrolId"];
                this.columnLane = this.Columns["Lane"];
                this.columnStart = this.Columns["Start"];
                this.columnWeapon = this.Columns["Weapon"];
                this.columnWeaponCaliber = this.Columns["WeaponCaliber"];
                this.columnPayed = this.Columns["Payed"];
            }
            
            private void InitClass() {
                this.columnClubName = new DataColumn("ClubName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubName);
                this.columnClubId = new DataColumn("ClubId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubId);
                this.columnShooterName = new DataColumn("ShooterName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShooterName);
                this.columnShooterClass = new DataColumn("ShooterClass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShooterClass);
                this.columnPatrolId = new DataColumn("PatrolId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPatrolId);
                this.columnLane = new DataColumn("Lane", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLane);
                this.columnStart = new DataColumn("Start", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStart);
                this.columnWeapon = new DataColumn("Weapon", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeapon);
                this.columnWeaponCaliber = new DataColumn("WeaponCaliber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeaponCaliber);
                this.columnPayed = new DataColumn("Payed", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPayed);
            }
            
            public PatrolsByClubRow NewPatrolsByClubRow() {
                return ((PatrolsByClubRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PatrolsByClubRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PatrolsByClubRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PatrolsByClubRowChanged != null)) {
                    this.PatrolsByClubRowChanged(this, new PatrolsByClubRowChangeEvent(((PatrolsByClubRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PatrolsByClubRowChanging != null)) {
                    this.PatrolsByClubRowChanging(this, new PatrolsByClubRowChangeEvent(((PatrolsByClubRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PatrolsByClubRowDeleted != null)) {
                    this.PatrolsByClubRowDeleted(this, new PatrolsByClubRowChangeEvent(((PatrolsByClubRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PatrolsByClubRowDeleting != null)) {
                    this.PatrolsByClubRowDeleting(this, new PatrolsByClubRowChangeEvent(((PatrolsByClubRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePatrolsByClubRow(PatrolsByClubRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatrolsByClubRow : DataRow {
            
            private PatrolsByClubDataTable tablePatrolsByClub;
            
            internal PatrolsByClubRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePatrolsByClub = ((PatrolsByClubDataTable)(this.Table));
            }
            
            public string ClubName {
                get {
                    try {
                        return ((string)(this[this.tablePatrolsByClub.ClubNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.ClubNameColumn] = value;
                }
            }
            
            public string ClubId {
                get {
                    try {
                        return ((string)(this[this.tablePatrolsByClub.ClubIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.ClubIdColumn] = value;
                }
            }
            
            public string ShooterName {
                get {
                    try {
                        return ((string)(this[this.tablePatrolsByClub.ShooterNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.ShooterNameColumn] = value;
                }
            }
            
            public string ShooterClass {
                get {
                    try {
                        return ((string)(this[this.tablePatrolsByClub.ShooterClassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.ShooterClassColumn] = value;
                }
            }
            
            public int PatrolId {
                get {
                    try {
                        return ((int)(this[this.tablePatrolsByClub.PatrolIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.PatrolIdColumn] = value;
                }
            }
            
            public int Lane {
                get {
                    try {
                        return ((int)(this[this.tablePatrolsByClub.LaneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.LaneColumn] = value;
                }
            }
            
            public System.DateTime Start {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePatrolsByClub.StartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.StartColumn] = value;
                }
            }
            
            public string Weapon {
                get {
                    try {
                        return ((string)(this[this.tablePatrolsByClub.WeaponColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.WeaponColumn] = value;
                }
            }
            
            public string WeaponCaliber {
                get {
                    try {
                        return ((string)(this[this.tablePatrolsByClub.WeaponCaliberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.WeaponCaliberColumn] = value;
                }
            }
            
            public int Payed {
                get {
                    try {
                        return ((int)(this[this.tablePatrolsByClub.PayedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePatrolsByClub.PayedColumn] = value;
                }
            }
            
            public bool IsClubNameNull() {
                return this.IsNull(this.tablePatrolsByClub.ClubNameColumn);
            }
            
            public void SetClubNameNull() {
                this[this.tablePatrolsByClub.ClubNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClubIdNull() {
                return this.IsNull(this.tablePatrolsByClub.ClubIdColumn);
            }
            
            public void SetClubIdNull() {
                this[this.tablePatrolsByClub.ClubIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsShooterNameNull() {
                return this.IsNull(this.tablePatrolsByClub.ShooterNameColumn);
            }
            
            public void SetShooterNameNull() {
                this[this.tablePatrolsByClub.ShooterNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsShooterClassNull() {
                return this.IsNull(this.tablePatrolsByClub.ShooterClassColumn);
            }
            
            public void SetShooterClassNull() {
                this[this.tablePatrolsByClub.ShooterClassColumn] = System.Convert.DBNull;
            }
            
            public bool IsPatrolIdNull() {
                return this.IsNull(this.tablePatrolsByClub.PatrolIdColumn);
            }
            
            public void SetPatrolIdNull() {
                this[this.tablePatrolsByClub.PatrolIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsLaneNull() {
                return this.IsNull(this.tablePatrolsByClub.LaneColumn);
            }
            
            public void SetLaneNull() {
                this[this.tablePatrolsByClub.LaneColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartNull() {
                return this.IsNull(this.tablePatrolsByClub.StartColumn);
            }
            
            public void SetStartNull() {
                this[this.tablePatrolsByClub.StartColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeaponNull() {
                return this.IsNull(this.tablePatrolsByClub.WeaponColumn);
            }
            
            public void SetWeaponNull() {
                this[this.tablePatrolsByClub.WeaponColumn] = System.Convert.DBNull;
            }
            
            public bool IsWeaponCaliberNull() {
                return this.IsNull(this.tablePatrolsByClub.WeaponCaliberColumn);
            }
            
            public void SetWeaponCaliberNull() {
                this[this.tablePatrolsByClub.WeaponCaliberColumn] = System.Convert.DBNull;
            }
            
            public bool IsPayedNull() {
                return this.IsNull(this.tablePatrolsByClub.PayedColumn);
            }
            
            public void SetPayedNull() {
                this[this.tablePatrolsByClub.PayedColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PatrolsByClubRowChangeEvent : EventArgs {
            
            private PatrolsByClubRow eventRow;
            
            private DataRowAction eventAction;
            
            public PatrolsByClubRowChangeEvent(PatrolsByClubRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PatrolsByClubRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
