//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Allberg.Shooter.Common {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DSStartupResources : DataSet {
        
        private ClubsDataTable tableClubs;
        
        private WeaponsDataTable tableWeapons;
        
        private ShootersDataTable tableShooters;
        
        private DataRelation relationClubsShooters;
        
        public DSStartupResources() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DSStartupResources(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Clubs"] != null)) {
                    this.Tables.Add(new ClubsDataTable(ds.Tables["Clubs"]));
                }
                if ((ds.Tables["Weapons"] != null)) {
                    this.Tables.Add(new WeaponsDataTable(ds.Tables["Weapons"]));
                }
                if ((ds.Tables["Shooters"] != null)) {
                    this.Tables.Add(new ShootersDataTable(ds.Tables["Shooters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClubsDataTable Clubs {
            get {
                return this.tableClubs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeaponsDataTable Weapons {
            get {
                return this.tableWeapons;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShootersDataTable Shooters {
            get {
                return this.tableShooters;
            }
        }
        
        public override DataSet Clone() {
            DSStartupResources cln = ((DSStartupResources)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Clubs"] != null)) {
                this.Tables.Add(new ClubsDataTable(ds.Tables["Clubs"]));
            }
            if ((ds.Tables["Weapons"] != null)) {
                this.Tables.Add(new WeaponsDataTable(ds.Tables["Weapons"]));
            }
            if ((ds.Tables["Shooters"] != null)) {
                this.Tables.Add(new ShootersDataTable(ds.Tables["Shooters"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableClubs = ((ClubsDataTable)(this.Tables["Clubs"]));
            if ((this.tableClubs != null)) {
                this.tableClubs.InitVars();
            }
            this.tableWeapons = ((WeaponsDataTable)(this.Tables["Weapons"]));
            if ((this.tableWeapons != null)) {
                this.tableWeapons.InitVars();
            }
            this.tableShooters = ((ShootersDataTable)(this.Tables["Shooters"]));
            if ((this.tableShooters != null)) {
                this.tableShooters.InitVars();
            }
            this.relationClubsShooters = this.Relations["ClubsShooters"];
        }
        
        private void InitClass() {
            this.DataSetName = "DSStartupResources";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DSStartupResources.xsd";
            this.Locale = new System.Globalization.CultureInfo("sv");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableClubs = new ClubsDataTable();
            this.Tables.Add(this.tableClubs);
            this.tableWeapons = new WeaponsDataTable();
            this.Tables.Add(this.tableWeapons);
            this.tableShooters = new ShootersDataTable();
            this.Tables.Add(this.tableShooters);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("ClubsShooters", new DataColumn[] {
                        this.tableClubs.ClubIdColumn}, new DataColumn[] {
                        this.tableShooters.ClubIdColumn});
            this.tableShooters.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationClubsShooters = new DataRelation("ClubsShooters", new DataColumn[] {
                        this.tableClubs.ClubIdColumn}, new DataColumn[] {
                        this.tableShooters.ClubIdColumn}, false);
            this.Relations.Add(this.relationClubsShooters);
        }
        
        private bool ShouldSerializeClubs() {
            return false;
        }
        
        private bool ShouldSerializeWeapons() {
            return false;
        }
        
        private bool ShouldSerializeShooters() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ClubsRowChangeEventHandler(object sender, ClubsRowChangeEvent e);
        
        public delegate void WeaponsRowChangeEventHandler(object sender, WeaponsRowChangeEvent e);
        
        public delegate void ShootersRowChangeEventHandler(object sender, ShootersRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClubsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClubId;
            
            private DataColumn columnName;
            
            private DataColumn columnCountry;
            
            private DataColumn columnEmail;
            
            private DataColumn columnPlusgiro;
            
            private DataColumn columnBankgiro;
            
            internal ClubsDataTable() : 
                    base("Clubs") {
                this.InitClass();
            }
            
            internal ClubsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClubIdColumn {
                get {
                    return this.columnClubId;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn PlusgiroColumn {
                get {
                    return this.columnPlusgiro;
                }
            }
            
            internal DataColumn BankgiroColumn {
                get {
                    return this.columnBankgiro;
                }
            }
            
            public ClubsRow this[int index] {
                get {
                    return ((ClubsRow)(this.Rows[index]));
                }
            }
            
            public event ClubsRowChangeEventHandler ClubsRowChanged;
            
            public event ClubsRowChangeEventHandler ClubsRowChanging;
            
            public event ClubsRowChangeEventHandler ClubsRowDeleted;
            
            public event ClubsRowChangeEventHandler ClubsRowDeleting;
            
            public void AddClubsRow(ClubsRow row) {
                this.Rows.Add(row);
            }
            
            public ClubsRow AddClubsRow(string ClubId, string Name, string Country, string Email, string Plusgiro, string Bankgiro) {
                ClubsRow rowClubsRow = ((ClubsRow)(this.NewRow()));
                rowClubsRow.ItemArray = new object[] {
                        ClubId,
                        Name,
                        Country,
                        Email,
                        Plusgiro,
                        Bankgiro};
                this.Rows.Add(rowClubsRow);
                return rowClubsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClubsDataTable cln = ((ClubsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClubsDataTable();
            }
            
            internal void InitVars() {
                this.columnClubId = this.Columns["ClubId"];
                this.columnName = this.Columns["Name"];
                this.columnCountry = this.Columns["Country"];
                this.columnEmail = this.Columns["Email"];
                this.columnPlusgiro = this.Columns["Plusgiro"];
                this.columnBankgiro = this.Columns["Bankgiro"];
            }
            
            private void InitClass() {
                this.columnClubId = new DataColumn("ClubId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubId);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnCountry = new DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCountry);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnPlusgiro = new DataColumn("Plusgiro", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlusgiro);
                this.columnBankgiro = new DataColumn("Bankgiro", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnBankgiro);
                this.Constraints.Add(new UniqueConstraint("StartupResourcesClubId", new DataColumn[] {
                                this.columnClubId}, false));
                this.columnClubId.AllowDBNull = false;
                this.columnClubId.Unique = true;
            }
            
            public ClubsRow NewClubsRow() {
                return ((ClubsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClubsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClubsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClubsRowChanged != null)) {
                    this.ClubsRowChanged(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClubsRowChanging != null)) {
                    this.ClubsRowChanging(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClubsRowDeleted != null)) {
                    this.ClubsRowDeleted(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClubsRowDeleting != null)) {
                    this.ClubsRowDeleting(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClubsRow(ClubsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClubsRow : DataRow {
            
            private ClubsDataTable tableClubs;
            
            internal ClubsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClubs = ((ClubsDataTable)(this.Table));
            }
            
            public string ClubId {
                get {
                    return ((string)(this[this.tableClubs.ClubIdColumn]));
                }
                set {
                    this[this.tableClubs.ClubIdColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableClubs.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClubs.NameColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableClubs.CountryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClubs.CountryColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableClubs.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClubs.EmailColumn] = value;
                }
            }
            
            public string Plusgiro {
                get {
                    try {
                        return ((string)(this[this.tableClubs.PlusgiroColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClubs.PlusgiroColumn] = value;
                }
            }
            
            public string Bankgiro {
                get {
                    try {
                        return ((string)(this[this.tableClubs.BankgiroColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClubs.BankgiroColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableClubs.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableClubs.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableClubs.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableClubs.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableClubs.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableClubs.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsPlusgiroNull() {
                return this.IsNull(this.tableClubs.PlusgiroColumn);
            }
            
            public void SetPlusgiroNull() {
                this[this.tableClubs.PlusgiroColumn] = System.Convert.DBNull;
            }
            
            public bool IsBankgiroNull() {
                return this.IsNull(this.tableClubs.BankgiroColumn);
            }
            
            public void SetBankgiroNull() {
                this[this.tableClubs.BankgiroColumn] = System.Convert.DBNull;
            }
            
            public ShootersRow[] GetShootersRows() {
                return ((ShootersRow[])(this.GetChildRows(this.Table.ChildRelations["ClubsShooters"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClubsRowChangeEvent : EventArgs {
            
            private ClubsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClubsRowChangeEvent(ClubsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClubsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnWeaponId;
            
            private DataColumn columnManufacturer;
            
            private DataColumn columnModel;
            
            private DataColumn columnCaliber;
            
            private DataColumn columnClass;
            
            internal WeaponsDataTable() : 
                    base("Weapons") {
                this.InitClass();
            }
            
            internal WeaponsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn WeaponIdColumn {
                get {
                    return this.columnWeaponId;
                }
            }
            
            internal DataColumn ManufacturerColumn {
                get {
                    return this.columnManufacturer;
                }
            }
            
            internal DataColumn ModelColumn {
                get {
                    return this.columnModel;
                }
            }
            
            internal DataColumn CaliberColumn {
                get {
                    return this.columnCaliber;
                }
            }
            
            internal DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            public WeaponsRow this[int index] {
                get {
                    return ((WeaponsRow)(this.Rows[index]));
                }
            }
            
            public event WeaponsRowChangeEventHandler WeaponsRowChanged;
            
            public event WeaponsRowChangeEventHandler WeaponsRowChanging;
            
            public event WeaponsRowChangeEventHandler WeaponsRowDeleted;
            
            public event WeaponsRowChangeEventHandler WeaponsRowDeleting;
            
            public void AddWeaponsRow(WeaponsRow row) {
                this.Rows.Add(row);
            }
            
            public WeaponsRow AddWeaponsRow(string WeaponId, string Manufacturer, string Model, string Caliber, int Class) {
                WeaponsRow rowWeaponsRow = ((WeaponsRow)(this.NewRow()));
                rowWeaponsRow.ItemArray = new object[] {
                        WeaponId,
                        Manufacturer,
                        Model,
                        Caliber,
                        Class};
                this.Rows.Add(rowWeaponsRow);
                return rowWeaponsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WeaponsDataTable cln = ((WeaponsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WeaponsDataTable();
            }
            
            internal void InitVars() {
                this.columnWeaponId = this.Columns["WeaponId"];
                this.columnManufacturer = this.Columns["Manufacturer"];
                this.columnModel = this.Columns["Model"];
                this.columnCaliber = this.Columns["Caliber"];
                this.columnClass = this.Columns["Class"];
            }
            
            private void InitClass() {
                this.columnWeaponId = new DataColumn("WeaponId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWeaponId);
                this.columnManufacturer = new DataColumn("Manufacturer", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnManufacturer);
                this.columnModel = new DataColumn("Model", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnModel);
                this.columnCaliber = new DataColumn("Caliber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCaliber);
                this.columnClass = new DataColumn("Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClass);
                this.Constraints.Add(new UniqueConstraint("StartupResourcesWeaponId", new DataColumn[] {
                                this.columnWeaponId}, false));
                this.columnWeaponId.AllowDBNull = false;
                this.columnWeaponId.Unique = true;
            }
            
            public WeaponsRow NewWeaponsRow() {
                return ((WeaponsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WeaponsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WeaponsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeaponsRowChanged != null)) {
                    this.WeaponsRowChanged(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeaponsRowChanging != null)) {
                    this.WeaponsRowChanging(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeaponsRowDeleted != null)) {
                    this.WeaponsRowDeleted(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeaponsRowDeleting != null)) {
                    this.WeaponsRowDeleting(this, new WeaponsRowChangeEvent(((WeaponsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWeaponsRow(WeaponsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponsRow : DataRow {
            
            private WeaponsDataTable tableWeapons;
            
            internal WeaponsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeapons = ((WeaponsDataTable)(this.Table));
            }
            
            public string WeaponId {
                get {
                    return ((string)(this[this.tableWeapons.WeaponIdColumn]));
                }
                set {
                    this[this.tableWeapons.WeaponIdColumn] = value;
                }
            }
            
            public string Manufacturer {
                get {
                    try {
                        return ((string)(this[this.tableWeapons.ManufacturerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeapons.ManufacturerColumn] = value;
                }
            }
            
            public string Model {
                get {
                    try {
                        return ((string)(this[this.tableWeapons.ModelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeapons.ModelColumn] = value;
                }
            }
            
            public string Caliber {
                get {
                    try {
                        return ((string)(this[this.tableWeapons.CaliberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeapons.CaliberColumn] = value;
                }
            }
            
            public int Class {
                get {
                    try {
                        return ((int)(this[this.tableWeapons.ClassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeapons.ClassColumn] = value;
                }
            }
            
            public bool IsManufacturerNull() {
                return this.IsNull(this.tableWeapons.ManufacturerColumn);
            }
            
            public void SetManufacturerNull() {
                this[this.tableWeapons.ManufacturerColumn] = System.Convert.DBNull;
            }
            
            public bool IsModelNull() {
                return this.IsNull(this.tableWeapons.ModelColumn);
            }
            
            public void SetModelNull() {
                this[this.tableWeapons.ModelColumn] = System.Convert.DBNull;
            }
            
            public bool IsCaliberNull() {
                return this.IsNull(this.tableWeapons.CaliberColumn);
            }
            
            public void SetCaliberNull() {
                this[this.tableWeapons.CaliberColumn] = System.Convert.DBNull;
            }
            
            public bool IsClassNull() {
                return this.IsNull(this.tableWeapons.ClassColumn);
            }
            
            public void SetClassNull() {
                this[this.tableWeapons.ClassColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponsRowChangeEvent : EventArgs {
            
            private WeaponsRow eventRow;
            
            private DataRowAction eventAction;
            
            public WeaponsRowChangeEvent(WeaponsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WeaponsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShootersDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCardnr;
            
            private DataColumn columnSurname;
            
            private DataColumn columnGivenname;
            
            private DataColumn columnEmail;
            
            private DataColumn columnClubId;
            
            private DataColumn columnClass;
            
            internal ShootersDataTable() : 
                    base("Shooters") {
                this.InitClass();
            }
            
            internal ShootersDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CardnrColumn {
                get {
                    return this.columnCardnr;
                }
            }
            
            internal DataColumn SurnameColumn {
                get {
                    return this.columnSurname;
                }
            }
            
            internal DataColumn GivennameColumn {
                get {
                    return this.columnGivenname;
                }
            }
            
            internal DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            internal DataColumn ClubIdColumn {
                get {
                    return this.columnClubId;
                }
            }
            
            internal DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            public ShootersRow this[int index] {
                get {
                    return ((ShootersRow)(this.Rows[index]));
                }
            }
            
            public event ShootersRowChangeEventHandler ShootersRowChanged;
            
            public event ShootersRowChangeEventHandler ShootersRowChanging;
            
            public event ShootersRowChangeEventHandler ShootersRowDeleted;
            
            public event ShootersRowChangeEventHandler ShootersRowDeleting;
            
            public void AddShootersRow(ShootersRow row) {
                this.Rows.Add(row);
            }
            
            public ShootersRow AddShootersRow(string Cardnr, string Surname, string Givenname, string Email, ClubsRow parentClubsRowByClubsShooters, int Class) {
                ShootersRow rowShootersRow = ((ShootersRow)(this.NewRow()));
                rowShootersRow.ItemArray = new object[] {
                        Cardnr,
                        Surname,
                        Givenname,
                        Email,
                        parentClubsRowByClubsShooters[0],
                        Class};
                this.Rows.Add(rowShootersRow);
                return rowShootersRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ShootersDataTable cln = ((ShootersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ShootersDataTable();
            }
            
            internal void InitVars() {
                this.columnCardnr = this.Columns["Cardnr"];
                this.columnSurname = this.Columns["Surname"];
                this.columnGivenname = this.Columns["Givenname"];
                this.columnEmail = this.Columns["Email"];
                this.columnClubId = this.Columns["ClubId"];
                this.columnClass = this.Columns["Class"];
            }
            
            private void InitClass() {
                this.columnCardnr = new DataColumn("Cardnr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCardnr);
                this.columnSurname = new DataColumn("Surname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSurname);
                this.columnGivenname = new DataColumn("Givenname", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGivenname);
                this.columnEmail = new DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEmail);
                this.columnClubId = new DataColumn("ClubId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubId);
                this.columnClass = new DataColumn("Class", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClass);
                this.Constraints.Add(new UniqueConstraint("DSStartupResourcesCardnr", new DataColumn[] {
                                this.columnCardnr}, false));
                this.columnCardnr.AllowDBNull = false;
                this.columnCardnr.Unique = true;
            }
            
            public ShootersRow NewShootersRow() {
                return ((ShootersRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ShootersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ShootersRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShootersRowChanged != null)) {
                    this.ShootersRowChanged(this, new ShootersRowChangeEvent(((ShootersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShootersRowChanging != null)) {
                    this.ShootersRowChanging(this, new ShootersRowChangeEvent(((ShootersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShootersRowDeleted != null)) {
                    this.ShootersRowDeleted(this, new ShootersRowChangeEvent(((ShootersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShootersRowDeleting != null)) {
                    this.ShootersRowDeleting(this, new ShootersRowChangeEvent(((ShootersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveShootersRow(ShootersRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShootersRow : DataRow {
            
            private ShootersDataTable tableShooters;
            
            internal ShootersRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableShooters = ((ShootersDataTable)(this.Table));
            }
            
            public string Cardnr {
                get {
                    return ((string)(this[this.tableShooters.CardnrColumn]));
                }
                set {
                    this[this.tableShooters.CardnrColumn] = value;
                }
            }
            
            public string Surname {
                get {
                    try {
                        return ((string)(this[this.tableShooters.SurnameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShooters.SurnameColumn] = value;
                }
            }
            
            public string Givenname {
                get {
                    try {
                        return ((string)(this[this.tableShooters.GivennameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShooters.GivennameColumn] = value;
                }
            }
            
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableShooters.EmailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShooters.EmailColumn] = value;
                }
            }
            
            public string ClubId {
                get {
                    try {
                        return ((string)(this[this.tableShooters.ClubIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShooters.ClubIdColumn] = value;
                }
            }
            
            public int Class {
                get {
                    try {
                        return ((int)(this[this.tableShooters.ClassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShooters.ClassColumn] = value;
                }
            }
            
            public ClubsRow ClubsRow {
                get {
                    return ((ClubsRow)(this.GetParentRow(this.Table.ParentRelations["ClubsShooters"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClubsShooters"]);
                }
            }
            
            public bool IsSurnameNull() {
                return this.IsNull(this.tableShooters.SurnameColumn);
            }
            
            public void SetSurnameNull() {
                this[this.tableShooters.SurnameColumn] = System.Convert.DBNull;
            }
            
            public bool IsGivennameNull() {
                return this.IsNull(this.tableShooters.GivennameColumn);
            }
            
            public void SetGivennameNull() {
                this[this.tableShooters.GivennameColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmailNull() {
                return this.IsNull(this.tableShooters.EmailColumn);
            }
            
            public void SetEmailNull() {
                this[this.tableShooters.EmailColumn] = System.Convert.DBNull;
            }
            
            public bool IsClubIdNull() {
                return this.IsNull(this.tableShooters.ClubIdColumn);
            }
            
            public void SetClubIdNull() {
                this[this.tableShooters.ClubIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsClassNull() {
                return this.IsNull(this.tableShooters.ClassColumn);
            }
            
            public void SetClassNull() {
                this[this.tableShooters.ClassColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ShootersRowChangeEvent : EventArgs {
            
            private ShootersRow eventRow;
            
            private DataRowAction eventAction;
            
            public ShootersRowChangeEvent(ShootersRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ShootersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
