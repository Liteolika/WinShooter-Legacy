//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Allberg.Shooter.Windows {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DatasetTeams : DataSet {
        
        private TeamsDataTable tableTeams;
        
        private ClubsDataTable tableClubs;
        
        private WeaponClassDataTable tableWeaponClass;
        
        private CompetitorsDataTable tableCompetitors;
        
        public DatasetTeams() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DatasetTeams(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Teams"] != null)) {
                    this.Tables.Add(new TeamsDataTable(ds.Tables["Teams"]));
                }
                if ((ds.Tables["Clubs"] != null)) {
                    this.Tables.Add(new ClubsDataTable(ds.Tables["Clubs"]));
                }
                if ((ds.Tables["WeaponClass"] != null)) {
                    this.Tables.Add(new WeaponClassDataTable(ds.Tables["WeaponClass"]));
                }
                if ((ds.Tables["Competitors"] != null)) {
                    this.Tables.Add(new CompetitorsDataTable(ds.Tables["Competitors"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TeamsDataTable Teams {
            get {
                return this.tableTeams;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClubsDataTable Clubs {
            get {
                return this.tableClubs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WeaponClassDataTable WeaponClass {
            get {
                return this.tableWeaponClass;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CompetitorsDataTable Competitors {
            get {
                return this.tableCompetitors;
            }
        }
        
        public override DataSet Clone() {
            DatasetTeams cln = ((DatasetTeams)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Teams"] != null)) {
                this.Tables.Add(new TeamsDataTable(ds.Tables["Teams"]));
            }
            if ((ds.Tables["Clubs"] != null)) {
                this.Tables.Add(new ClubsDataTable(ds.Tables["Clubs"]));
            }
            if ((ds.Tables["WeaponClass"] != null)) {
                this.Tables.Add(new WeaponClassDataTable(ds.Tables["WeaponClass"]));
            }
            if ((ds.Tables["Competitors"] != null)) {
                this.Tables.Add(new CompetitorsDataTable(ds.Tables["Competitors"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableTeams = ((TeamsDataTable)(this.Tables["Teams"]));
            if ((this.tableTeams != null)) {
                this.tableTeams.InitVars();
            }
            this.tableClubs = ((ClubsDataTable)(this.Tables["Clubs"]));
            if ((this.tableClubs != null)) {
                this.tableClubs.InitVars();
            }
            this.tableWeaponClass = ((WeaponClassDataTable)(this.Tables["WeaponClass"]));
            if ((this.tableWeaponClass != null)) {
                this.tableWeaponClass.InitVars();
            }
            this.tableCompetitors = ((CompetitorsDataTable)(this.Tables["Competitors"]));
            if ((this.tableCompetitors != null)) {
                this.tableCompetitors.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DatasetTeams";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatasetTeams.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTeams = new TeamsDataTable();
            this.Tables.Add(this.tableTeams);
            this.tableClubs = new ClubsDataTable();
            this.Tables.Add(this.tableClubs);
            this.tableWeaponClass = new WeaponClassDataTable();
            this.Tables.Add(this.tableWeaponClass);
            this.tableCompetitors = new CompetitorsDataTable();
            this.Tables.Add(this.tableCompetitors);
        }
        
        private bool ShouldSerializeTeams() {
            return false;
        }
        
        private bool ShouldSerializeClubs() {
            return false;
        }
        
        private bool ShouldSerializeWeaponClass() {
            return false;
        }
        
        private bool ShouldSerializeCompetitors() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void TeamsRowChangeEventHandler(object sender, TeamsRowChangeEvent e);
        
        public delegate void ClubsRowChangeEventHandler(object sender, ClubsRowChangeEvent e);
        
        public delegate void WeaponClassRowChangeEventHandler(object sender, WeaponClassRowChangeEvent e);
        
        public delegate void CompetitorsRowChangeEventHandler(object sender, CompetitorsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeamsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTeamsId;
            
            private DataColumn columnTeamsName;
            
            internal TeamsDataTable() : 
                    base("Teams") {
                this.InitClass();
            }
            
            internal TeamsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TeamsIdColumn {
                get {
                    return this.columnTeamsId;
                }
            }
            
            internal DataColumn TeamsNameColumn {
                get {
                    return this.columnTeamsName;
                }
            }
            
            public TeamsRow this[int index] {
                get {
                    return ((TeamsRow)(this.Rows[index]));
                }
            }
            
            public event TeamsRowChangeEventHandler TeamsRowChanged;
            
            public event TeamsRowChangeEventHandler TeamsRowChanging;
            
            public event TeamsRowChangeEventHandler TeamsRowDeleted;
            
            public event TeamsRowChangeEventHandler TeamsRowDeleting;
            
            public void AddTeamsRow(TeamsRow row) {
                this.Rows.Add(row);
            }
            
            public TeamsRow AddTeamsRow(int TeamsId, string TeamsName) {
                TeamsRow rowTeamsRow = ((TeamsRow)(this.NewRow()));
                rowTeamsRow.ItemArray = new object[] {
                        TeamsId,
                        TeamsName};
                this.Rows.Add(rowTeamsRow);
                return rowTeamsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TeamsDataTable cln = ((TeamsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TeamsDataTable();
            }
            
            internal void InitVars() {
                this.columnTeamsId = this.Columns["TeamsId"];
                this.columnTeamsName = this.Columns["TeamsName"];
            }
            
            private void InitClass() {
                this.columnTeamsId = new DataColumn("TeamsId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamsId);
                this.columnTeamsName = new DataColumn("TeamsName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTeamsName);
            }
            
            public TeamsRow NewTeamsRow() {
                return ((TeamsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TeamsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TeamsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TeamsRowChanged != null)) {
                    this.TeamsRowChanged(this, new TeamsRowChangeEvent(((TeamsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TeamsRowChanging != null)) {
                    this.TeamsRowChanging(this, new TeamsRowChangeEvent(((TeamsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TeamsRowDeleted != null)) {
                    this.TeamsRowDeleted(this, new TeamsRowChangeEvent(((TeamsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TeamsRowDeleting != null)) {
                    this.TeamsRowDeleting(this, new TeamsRowChangeEvent(((TeamsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTeamsRow(TeamsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeamsRow : DataRow {
            
            private TeamsDataTable tableTeams;
            
            internal TeamsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTeams = ((TeamsDataTable)(this.Table));
            }
            
            public int TeamsId {
                get {
                    try {
                        return ((int)(this[this.tableTeams.TeamsIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeams.TeamsIdColumn] = value;
                }
            }
            
            public string TeamsName {
                get {
                    try {
                        return ((string)(this[this.tableTeams.TeamsNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeams.TeamsNameColumn] = value;
                }
            }
            
            public bool IsTeamsIdNull() {
                return this.IsNull(this.tableTeams.TeamsIdColumn);
            }
            
            public void SetTeamsIdNull() {
                this[this.tableTeams.TeamsIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsTeamsNameNull() {
                return this.IsNull(this.tableTeams.TeamsNameColumn);
            }
            
            public void SetTeamsNameNull() {
                this[this.tableTeams.TeamsNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TeamsRowChangeEvent : EventArgs {
            
            private TeamsRow eventRow;
            
            private DataRowAction eventAction;
            
            public TeamsRowChangeEvent(TeamsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TeamsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClubsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClubId;
            
            private DataColumn columnClubName;
            
            internal ClubsDataTable() : 
                    base("Clubs") {
                this.InitClass();
            }
            
            internal ClubsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClubIdColumn {
                get {
                    return this.columnClubId;
                }
            }
            
            internal DataColumn ClubNameColumn {
                get {
                    return this.columnClubName;
                }
            }
            
            public ClubsRow this[int index] {
                get {
                    return ((ClubsRow)(this.Rows[index]));
                }
            }
            
            public event ClubsRowChangeEventHandler ClubsRowChanged;
            
            public event ClubsRowChangeEventHandler ClubsRowChanging;
            
            public event ClubsRowChangeEventHandler ClubsRowDeleted;
            
            public event ClubsRowChangeEventHandler ClubsRowDeleting;
            
            public void AddClubsRow(ClubsRow row) {
                this.Rows.Add(row);
            }
            
            public ClubsRow AddClubsRow(string ClubId, string ClubName) {
                ClubsRow rowClubsRow = ((ClubsRow)(this.NewRow()));
                rowClubsRow.ItemArray = new object[] {
                        ClubId,
                        ClubName};
                this.Rows.Add(rowClubsRow);
                return rowClubsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ClubsDataTable cln = ((ClubsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ClubsDataTable();
            }
            
            internal void InitVars() {
                this.columnClubId = this.Columns["ClubId"];
                this.columnClubName = this.Columns["ClubName"];
            }
            
            private void InitClass() {
                this.columnClubId = new DataColumn("ClubId", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubId);
                this.columnClubName = new DataColumn("ClubName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClubName);
            }
            
            public ClubsRow NewClubsRow() {
                return ((ClubsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ClubsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ClubsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClubsRowChanged != null)) {
                    this.ClubsRowChanged(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClubsRowChanging != null)) {
                    this.ClubsRowChanging(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClubsRowDeleted != null)) {
                    this.ClubsRowDeleted(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClubsRowDeleting != null)) {
                    this.ClubsRowDeleting(this, new ClubsRowChangeEvent(((ClubsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveClubsRow(ClubsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClubsRow : DataRow {
            
            private ClubsDataTable tableClubs;
            
            internal ClubsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableClubs = ((ClubsDataTable)(this.Table));
            }
            
            public string ClubId {
                get {
                    try {
                        return ((string)(this[this.tableClubs.ClubIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClubs.ClubIdColumn] = value;
                }
            }
            
            public string ClubName {
                get {
                    try {
                        return ((string)(this[this.tableClubs.ClubNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClubs.ClubNameColumn] = value;
                }
            }
            
            public bool IsClubIdNull() {
                return this.IsNull(this.tableClubs.ClubIdColumn);
            }
            
            public void SetClubIdNull() {
                this[this.tableClubs.ClubIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsClubNameNull() {
                return this.IsNull(this.tableClubs.ClubNameColumn);
            }
            
            public void SetClubNameNull() {
                this[this.tableClubs.ClubNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ClubsRowChangeEvent : EventArgs {
            
            private ClubsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ClubsRowChangeEvent(ClubsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ClubsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponClassDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnClassId;
            
            private DataColumn columnClassName;
            
            internal WeaponClassDataTable() : 
                    base("WeaponClass") {
                this.InitClass();
            }
            
            internal WeaponClassDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ClassIdColumn {
                get {
                    return this.columnClassId;
                }
            }
            
            internal DataColumn ClassNameColumn {
                get {
                    return this.columnClassName;
                }
            }
            
            public WeaponClassRow this[int index] {
                get {
                    return ((WeaponClassRow)(this.Rows[index]));
                }
            }
            
            public event WeaponClassRowChangeEventHandler WeaponClassRowChanged;
            
            public event WeaponClassRowChangeEventHandler WeaponClassRowChanging;
            
            public event WeaponClassRowChangeEventHandler WeaponClassRowDeleted;
            
            public event WeaponClassRowChangeEventHandler WeaponClassRowDeleting;
            
            public void AddWeaponClassRow(WeaponClassRow row) {
                this.Rows.Add(row);
            }
            
            public WeaponClassRow AddWeaponClassRow(int ClassId, string ClassName) {
                WeaponClassRow rowWeaponClassRow = ((WeaponClassRow)(this.NewRow()));
                rowWeaponClassRow.ItemArray = new object[] {
                        ClassId,
                        ClassName};
                this.Rows.Add(rowWeaponClassRow);
                return rowWeaponClassRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                WeaponClassDataTable cln = ((WeaponClassDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new WeaponClassDataTable();
            }
            
            internal void InitVars() {
                this.columnClassId = this.Columns["ClassId"];
                this.columnClassName = this.Columns["ClassName"];
            }
            
            private void InitClass() {
                this.columnClassId = new DataColumn("ClassId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassId);
                this.columnClassName = new DataColumn("ClassName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClassName);
            }
            
            public WeaponClassRow NewWeaponClassRow() {
                return ((WeaponClassRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new WeaponClassRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(WeaponClassRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WeaponClassRowChanged != null)) {
                    this.WeaponClassRowChanged(this, new WeaponClassRowChangeEvent(((WeaponClassRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WeaponClassRowChanging != null)) {
                    this.WeaponClassRowChanging(this, new WeaponClassRowChangeEvent(((WeaponClassRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WeaponClassRowDeleted != null)) {
                    this.WeaponClassRowDeleted(this, new WeaponClassRowChangeEvent(((WeaponClassRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WeaponClassRowDeleting != null)) {
                    this.WeaponClassRowDeleting(this, new WeaponClassRowChangeEvent(((WeaponClassRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveWeaponClassRow(WeaponClassRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponClassRow : DataRow {
            
            private WeaponClassDataTable tableWeaponClass;
            
            internal WeaponClassRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableWeaponClass = ((WeaponClassDataTable)(this.Table));
            }
            
            public int ClassId {
                get {
                    try {
                        return ((int)(this[this.tableWeaponClass.ClassIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeaponClass.ClassIdColumn] = value;
                }
            }
            
            public string ClassName {
                get {
                    try {
                        return ((string)(this[this.tableWeaponClass.ClassNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWeaponClass.ClassNameColumn] = value;
                }
            }
            
            public bool IsClassIdNull() {
                return this.IsNull(this.tableWeaponClass.ClassIdColumn);
            }
            
            public void SetClassIdNull() {
                this[this.tableWeaponClass.ClassIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsClassNameNull() {
                return this.IsNull(this.tableWeaponClass.ClassNameColumn);
            }
            
            public void SetClassNameNull() {
                this[this.tableWeaponClass.ClassNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class WeaponClassRowChangeEvent : EventArgs {
            
            private WeaponClassRow eventRow;
            
            private DataRowAction eventAction;
            
            public WeaponClassRowChangeEvent(WeaponClassRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public WeaponClassRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompetitorsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCompId;
            
            private DataColumn columnCompName;
            
            internal CompetitorsDataTable() : 
                    base("Competitors") {
                this.InitClass();
            }
            
            internal CompetitorsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CompIdColumn {
                get {
                    return this.columnCompId;
                }
            }
            
            internal DataColumn CompNameColumn {
                get {
                    return this.columnCompName;
                }
            }
            
            public CompetitorsRow this[int index] {
                get {
                    return ((CompetitorsRow)(this.Rows[index]));
                }
            }
            
            public event CompetitorsRowChangeEventHandler CompetitorsRowChanged;
            
            public event CompetitorsRowChangeEventHandler CompetitorsRowChanging;
            
            public event CompetitorsRowChangeEventHandler CompetitorsRowDeleted;
            
            public event CompetitorsRowChangeEventHandler CompetitorsRowDeleting;
            
            public void AddCompetitorsRow(CompetitorsRow row) {
                this.Rows.Add(row);
            }
            
            public CompetitorsRow AddCompetitorsRow(int CompId, string CompName) {
                CompetitorsRow rowCompetitorsRow = ((CompetitorsRow)(this.NewRow()));
                rowCompetitorsRow.ItemArray = new object[] {
                        CompId,
                        CompName};
                this.Rows.Add(rowCompetitorsRow);
                return rowCompetitorsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CompetitorsDataTable cln = ((CompetitorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CompetitorsDataTable();
            }
            
            internal void InitVars() {
                this.columnCompId = this.Columns["CompId"];
                this.columnCompName = this.Columns["CompName"];
            }
            
            private void InitClass() {
                this.columnCompId = new DataColumn("CompId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompId);
                this.columnCompName = new DataColumn("CompName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCompName);
            }
            
            public CompetitorsRow NewCompetitorsRow() {
                return ((CompetitorsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CompetitorsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CompetitorsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CompetitorsRowChanged != null)) {
                    this.CompetitorsRowChanged(this, new CompetitorsRowChangeEvent(((CompetitorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CompetitorsRowChanging != null)) {
                    this.CompetitorsRowChanging(this, new CompetitorsRowChangeEvent(((CompetitorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CompetitorsRowDeleted != null)) {
                    this.CompetitorsRowDeleted(this, new CompetitorsRowChangeEvent(((CompetitorsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CompetitorsRowDeleting != null)) {
                    this.CompetitorsRowDeleting(this, new CompetitorsRowChangeEvent(((CompetitorsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCompetitorsRow(CompetitorsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompetitorsRow : DataRow {
            
            private CompetitorsDataTable tableCompetitors;
            
            internal CompetitorsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCompetitors = ((CompetitorsDataTable)(this.Table));
            }
            
            public int CompId {
                get {
                    try {
                        return ((int)(this[this.tableCompetitors.CompIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompetitors.CompIdColumn] = value;
                }
            }
            
            public string CompName {
                get {
                    try {
                        return ((string)(this[this.tableCompetitors.CompNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCompetitors.CompNameColumn] = value;
                }
            }
            
            public bool IsCompIdNull() {
                return this.IsNull(this.tableCompetitors.CompIdColumn);
            }
            
            public void SetCompIdNull() {
                this[this.tableCompetitors.CompIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsCompNameNull() {
                return this.IsNull(this.tableCompetitors.CompNameColumn);
            }
            
            public void SetCompNameNull() {
                this[this.tableCompetitors.CompNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CompetitorsRowChangeEvent : EventArgs {
            
            private CompetitorsRow eventRow;
            
            private DataRowAction eventAction;
            
            public CompetitorsRowChangeEvent(CompetitorsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CompetitorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
