//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Allberg.Shooter.Windows {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DatasetResults : DataSet {
        
        private ResultsDataTable tableResults;
        
        public DatasetResults() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DatasetResults(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Results"] != null)) {
                    this.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResultsDataTable Results {
            get {
                return this.tableResults;
            }
        }
        
        public override DataSet Clone() {
            DatasetResults cln = ((DatasetResults)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Results"] != null)) {
                this.Tables.Add(new ResultsDataTable(ds.Tables["Results"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableResults = ((ResultsDataTable)(this.Tables["Results"]));
            if ((this.tableResults != null)) {
                this.tableResults.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DatasetResults";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatasetResults.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableResults = new ResultsDataTable();
            this.Tables.Add(this.tableResults);
        }
        
        private bool ShouldSerializeResults() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ResultsRowChangeEventHandler(object sender, ResultsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResultsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnPlace;
            
            private DataColumn columnShooterName;
            
            private DataColumn columnClub;
            
            private DataColumn columnHits;
            
            private DataColumn columnMedal;
            
            private DataColumn columnPoints;
            
            private DataColumn columnHitsPerStation;
            
            internal ResultsDataTable() : 
                    base("Results") {
                this.InitClass();
            }
            
            internal ResultsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn PlaceColumn {
                get {
                    return this.columnPlace;
                }
            }
            
            internal DataColumn ShooterNameColumn {
                get {
                    return this.columnShooterName;
                }
            }
            
            internal DataColumn ClubColumn {
                get {
                    return this.columnClub;
                }
            }
            
            internal DataColumn HitsColumn {
                get {
                    return this.columnHits;
                }
            }
            
            internal DataColumn MedalColumn {
                get {
                    return this.columnMedal;
                }
            }
            
            internal DataColumn PointsColumn {
                get {
                    return this.columnPoints;
                }
            }
            
            internal DataColumn HitsPerStationColumn {
                get {
                    return this.columnHitsPerStation;
                }
            }
            
            public ResultsRow this[int index] {
                get {
                    return ((ResultsRow)(this.Rows[index]));
                }
            }
            
            public event ResultsRowChangeEventHandler ResultsRowChanged;
            
            public event ResultsRowChangeEventHandler ResultsRowChanging;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleted;
            
            public event ResultsRowChangeEventHandler ResultsRowDeleting;
            
            public void AddResultsRow(ResultsRow row) {
                this.Rows.Add(row);
            }
            
            public ResultsRow AddResultsRow(int Place, string ShooterName, string Club, string Hits, string Medal, int Points, string HitsPerStation) {
                ResultsRow rowResultsRow = ((ResultsRow)(this.NewRow()));
                rowResultsRow.ItemArray = new object[] {
                        Place,
                        ShooterName,
                        Club,
                        Hits,
                        Medal,
                        Points,
                        HitsPerStation};
                this.Rows.Add(rowResultsRow);
                return rowResultsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ResultsDataTable cln = ((ResultsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ResultsDataTable();
            }
            
            internal void InitVars() {
                this.columnPlace = this.Columns["Place"];
                this.columnShooterName = this.Columns["ShooterName"];
                this.columnClub = this.Columns["Club"];
                this.columnHits = this.Columns["Hits"];
                this.columnMedal = this.Columns["Medal"];
                this.columnPoints = this.Columns["Points"];
                this.columnHitsPerStation = this.Columns["HitsPerStation"];
            }
            
            private void InitClass() {
                this.columnPlace = new DataColumn("Place", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPlace);
                this.columnShooterName = new DataColumn("ShooterName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnShooterName);
                this.columnClub = new DataColumn("Club", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClub);
                this.columnHits = new DataColumn("Hits", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHits);
                this.columnMedal = new DataColumn("Medal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMedal);
                this.columnPoints = new DataColumn("Points", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPoints);
                this.columnHitsPerStation = new DataColumn("HitsPerStation", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHitsPerStation);
            }
            
            public ResultsRow NewResultsRow() {
                return ((ResultsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ResultsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ResultsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultsRowChanged != null)) {
                    this.ResultsRowChanged(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultsRowChanging != null)) {
                    this.ResultsRowChanging(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultsRowDeleted != null)) {
                    this.ResultsRowDeleted(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultsRowDeleting != null)) {
                    this.ResultsRowDeleting(this, new ResultsRowChangeEvent(((ResultsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveResultsRow(ResultsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResultsRow : DataRow {
            
            private ResultsDataTable tableResults;
            
            internal ResultsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableResults = ((ResultsDataTable)(this.Table));
            }
            
            public int Place {
                get {
                    try {
                        return ((int)(this[this.tableResults.PlaceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.PlaceColumn] = value;
                }
            }
            
            public string ShooterName {
                get {
                    try {
                        return ((string)(this[this.tableResults.ShooterNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ShooterNameColumn] = value;
                }
            }
            
            public string Club {
                get {
                    try {
                        return ((string)(this[this.tableResults.ClubColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.ClubColumn] = value;
                }
            }
            
            public string Hits {
                get {
                    try {
                        return ((string)(this[this.tableResults.HitsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.HitsColumn] = value;
                }
            }
            
            public string Medal {
                get {
                    try {
                        return ((string)(this[this.tableResults.MedalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.MedalColumn] = value;
                }
            }
            
            public int Points {
                get {
                    try {
                        return ((int)(this[this.tableResults.PointsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.PointsColumn] = value;
                }
            }
            
            public string HitsPerStation {
                get {
                    try {
                        return ((string)(this[this.tableResults.HitsPerStationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResults.HitsPerStationColumn] = value;
                }
            }
            
            public bool IsPlaceNull() {
                return this.IsNull(this.tableResults.PlaceColumn);
            }
            
            public void SetPlaceNull() {
                this[this.tableResults.PlaceColumn] = System.Convert.DBNull;
            }
            
            public bool IsShooterNameNull() {
                return this.IsNull(this.tableResults.ShooterNameColumn);
            }
            
            public void SetShooterNameNull() {
                this[this.tableResults.ShooterNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsClubNull() {
                return this.IsNull(this.tableResults.ClubColumn);
            }
            
            public void SetClubNull() {
                this[this.tableResults.ClubColumn] = System.Convert.DBNull;
            }
            
            public bool IsHitsNull() {
                return this.IsNull(this.tableResults.HitsColumn);
            }
            
            public void SetHitsNull() {
                this[this.tableResults.HitsColumn] = System.Convert.DBNull;
            }
            
            public bool IsMedalNull() {
                return this.IsNull(this.tableResults.MedalColumn);
            }
            
            public void SetMedalNull() {
                this[this.tableResults.MedalColumn] = System.Convert.DBNull;
            }
            
            public bool IsPointsNull() {
                return this.IsNull(this.tableResults.PointsColumn);
            }
            
            public void SetPointsNull() {
                this[this.tableResults.PointsColumn] = System.Convert.DBNull;
            }
            
            public bool IsHitsPerStationNull() {
                return this.IsNull(this.tableResults.HitsPerStationColumn);
            }
            
            public void SetHitsPerStationNull() {
                this[this.tableResults.HitsPerStationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ResultsRowChangeEvent : EventArgs {
            
            private ResultsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ResultsRowChangeEvent(ResultsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ResultsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
